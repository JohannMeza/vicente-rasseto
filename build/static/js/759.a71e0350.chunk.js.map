{"version":3,"file":"static/js/759.a71e0350.chunk.js","mappings":"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","sources":["modules/administrador/grados/detail/NivelEstudioDetail.js"],"sourcesContent":["import { Box, Grid, Stack, Table, TableBody, TableCell, TableHead, TableRow } from '@mui/material';\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useNavigate } from 'react-router-dom';\r\nimport ButtonsSearchComponent from \"../../../../components/utilComponents/ButtonsSearchComponent\";\r\nimport { pathServer } from \"../../../../config/router/path\";\r\nimport { pathFront } from '../../../../config/router/pathFront';\r\nimport Controls from \"../../../../framework/components/Controls\";\r\nimport { ICON } from \"../../../../framework/components/icons/Icon\";\r\nimport { SaveRequestData } from \"../../../../helpers/helpRequestBackend\";\r\nimport { useForm } from \"../../../../hooks/useForm\";\r\nimport { useFormValidation } from '../../../../hooks/useFormValidation';\r\nimport useLoaderContext from \"../../../../hooks/useLoaderContext\";\r\nimport { SERVICES_PUT, SERVICES_POST } from \"../../../../services/services.axios\";\r\nimport { AlertUtilDelete, AlertUtilRelease } from '../../../../util/AlertUtil';\r\nimport { MessageUtil } from \"../../../../util/MessageUtil\";\r\n\r\nconst dataInitialFilter = {\r\n  NIVEL_ESTUDIO: \"\",\r\n  ESTADO: true,\r\n};\r\n\r\nconst paginate = {\r\n  rowsPerPage: 10,\r\n  page: 0,\r\n  count: 0,\r\n};\r\n\r\nconst estadoList = [\r\n  { label: \"Activo\", value: true },\r\n  { label: \"Inactivo\", value: false }\r\n]\r\n\r\nexport default function NivelEstudioDetail () {\r\n  const [dataForm, handleDataFormChange, resetData] = useForm(dataInitialFilter);\r\n  const [isDataToEdit, setIsDataToEdit] = useState(null);\r\n  const [open, setOpen] = useState(false);\r\n  const [pagination, setPagination] = useState(paginate);\r\n  const [nivelEstudio, setNivelEstudio] = useState([]);\r\n  const setLoader = useLoaderContext();\r\n  const navigate = useNavigate()\r\n\r\n  const getNivelEstudio = (rowsPerPage = 10, page = 1) => {\r\n    setLoader(true);\r\n    SaveRequestData({\r\n      path: pathServer.ADMINISTRACION.NIVEL_ESTUDIO.INDEX,\r\n      body: dataForm,\r\n      fnRequest: SERVICES_POST,\r\n      pagination: true,\r\n      rowsPerPage,\r\n      page,\r\n      success: (resp) => {\r\n        setLoader(false);\r\n        let { rowsPerPage, count, page } = resp;\r\n        --page;\r\n        setNivelEstudio(resp.data);\r\n        setPagination({ rowsPerPage, count, page });\r\n      },\r\n      error: (err) => {\r\n        setLoader(false);\r\n        MessageUtil({ message: err.statusText, type: \"error\", seg: 10 });\r\n      },\r\n    });\r\n  };\r\n\r\n  const saveNivelEstudio = (dataSave) => {\r\n    setLoader(true);\r\n    SaveRequestData({\r\n      path: pathServer.ADMINISTRACION.NIVEL_ESTUDIO.NEW,\r\n      body: dataSave,\r\n      fnRequest: SERVICES_POST,\r\n      success: (resp) => {\r\n        setLoader(false);\r\n        getNivelEstudio()\r\n        MessageUtil({ message: resp.statusText, type: \"success\", seg: 10 });\r\n      },\r\n      error: (err) => {\r\n        setLoader(false);\r\n        MessageUtil({ message: err.statusText, type: \"error\", seg: 10 });\r\n      },\r\n    });\r\n  }\r\n\r\n  const handleClickEdit = (dataEdit) => {\r\n    setIsDataToEdit(dataEdit)\r\n    setOpen(true)\r\n  }\r\n\r\n  useEffect(() => {\r\n    getNivelEstudio();\r\n  }, []);\r\n  \r\n  return (\r\n    <Box>\r\n      <Stack direction=\"row\" spacing={3}>\r\n        <Controls.Title variant=\"h1\" component=\"h1\" title=\"Nivel Estudio\" />\r\n\r\n        <Controls.ButtonComponent\r\n          variant=\"primary-small\"\r\n          type=\"admin\"\r\n          title=\"Nuevo\"\r\n          onClick={() => setOpen(true)}\r\n        />\r\n      </Stack>\r\n      <br />\r\n      <Box>\r\n        <Controls.TextComponent variant=\"h3\" component=\"div\">Filtros de BÃºsqueda</Controls.TextComponent>\r\n        <br />\r\n        <Grid container spacing={2}>\r\n          <Grid item xs={3}>\r\n            <Controls.InputComponent \r\n              label=\"Nivel Estudio\" \r\n              name=\"NIVEL_ESTUDIO\"\r\n              onChange={handleDataFormChange}\r\n              value={dataForm.NIVEL_ESTUDIO}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={3}>\r\n            <Controls.SelectComponent \r\n              label=\"Estado\" \r\n              list={estadoList}\r\n              name=\"ESTADO\"\r\n              onChange={handleDataFormChange}\r\n              value={dataForm.ESTADO}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n        <br />\r\n        <ButtonsSearchComponent resetForm={resetData} filterForm={getNivelEstudio} />\r\n      </Box>\r\n      <br />\r\n      <Controls.TableComponents\r\n        pagination={pagination}\r\n        setPagination={setPagination}\r\n        fnPagination={getNivelEstudio}\r\n      >\r\n        <Table>\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell>Nivel Estudio</TableCell>\r\n              <TableCell>Estado</TableCell>\r\n              <TableCell>Opciones</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {nivelEstudio?.length > 0 ? (\r\n              nivelEstudio.map((el, index) => (\r\n                <TableRow key={index}>\r\n                  <TableCell>{el.NIVEL_ESTUDIO}</TableCell>\r\n                  <TableCell>{el.ESTADO ? 'Activo' : 'Inactivo' }</TableCell>\r\n                  <TableCell>\r\n                    <Stack direction=\"row\" spacing={1}>\r\n                      <Controls.ButtonIconComponent\r\n                        title=\"Editar\"\r\n                        icon={ICON.EDIT}\r\n                        onClick={() => handleClickEdit(el)}\r\n                      />\r\n                      <Controls.ButtonComponent\r\n                        variant=\"secondary-small\"\r\n                        type=\"admin\"\r\n                        title=\"configurar\"\r\n                        onClick={() => navigate(pathFront.GRADOS.ADMIN)}\r\n                      />\r\n                    </Stack>\r\n                  </TableCell>\r\n                </TableRow>  \r\n              ))\r\n            ) : (\r\n              <TableRow>\r\n                <TableCell colSpan={3} sx={{ textAlign: \"center\" }}>Sin Filas</TableCell>\r\n              </TableRow>\r\n            )}\r\n          </TableBody>\r\n        </Table>\r\n\r\n        <ModalNivelEstudioSave\r\n          open={open}\r\n          setOpen={setOpen}\r\n          saveNivelEstudio={saveNivelEstudio}\r\n          isDataToEdit={isDataToEdit}\r\n          setIsDataToEdit={setIsDataToEdit}\r\n        />\r\n      </Controls.TableComponents>    \r\n    </Box>\r\n  )\r\n}\r\n\r\nconst ModalNivelEstudioSave = ({ open, setOpen, saveNivelEstudio, isDataToEdit, setIsDataToEdit }) => {\r\n  const validate = (fieldValues = data) =>  {\r\n    let temp = {...errors};\r\n    \r\n    if (\"NIVEL_ESTUDIO\" in fieldValues) {\r\n      temp.NIVEL_ESTUDIO = !fieldValues.NIVEL_ESTUDIO ? \"El campo Nivel de Estudio es requerido\" : \"\";\r\n    } \r\n\r\n    if (\"ESTADO\" in fieldValues) {\r\n      temp.ESTADO = typeof fieldValues.ESTADO !== \"boolean\" ? \"El campo Estado es requerido\" : \"\";\r\n    } \r\n    \r\n    setErrors({...temp});\r\n    if (fieldValues === data) {\r\n      return Object.values(temp).every((x) => x === '');\r\n    }\r\n  }\r\n\r\n  const {data, setData, errors, setErrors, handleInputFormChange, resetForm} = useFormValidation(dataInitialFilter, true, validate);\r\n  const closeModal = () => {\r\n    resetForm()\r\n    setOpen(false)\r\n    setIsDataToEdit(null)\r\n  }\r\n\r\n  const guardarDatos = () => {\r\n    if (validate()) {\r\n      saveNivelEstudio(data)\r\n      setIsDataToEdit(null)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (isDataToEdit) {\r\n      setData(isDataToEdit)\r\n    }\r\n  }, [isDataToEdit, setData])\r\n\r\n  return (\r\n    <Controls.Modal\r\n    open={open}\r\n    setOpen={closeModal}\r\n    minWidth={600}\r\n    fullWidth={true}\r\n    maxWidth=\"sm\"\r\n    title=\"Nuevo Nivel Estudio\"\r\n    >\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={12}>\r\n          <Controls.InputComponent\r\n            label=\"Nivel Estudio\"\r\n            name=\"NIVEL_ESTUDIO\"\r\n            onChange={handleInputFormChange}\r\n            error={errors.NIVEL_ESTUDIO}\r\n            value={data.NIVEL_ESTUDIO}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <Controls.SelectComponent\r\n            label=\"Estado\"\r\n            list={estadoList}\r\n            name=\"ESTADO\"\r\n            onChange={handleInputFormChange}\r\n            error={errors.ESTADO}\r\n            value={data.ESTADO}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n      <br />\r\n      <Stack direction=\"row\" spacing={3} justifyContent=\"center\">\r\n        <Controls.ButtonComponent\r\n          title=\"VOLVER\"\r\n          variant=\"secondary-normal\"\r\n          type=\"admin\"\r\n          icon={ICON.BACK}\r\n          onClick={closeModal}\r\n        />\r\n        <Controls.ButtonComponent\r\n          title=\"Guardar\"\r\n          variant=\"primary-normal\"\r\n          type=\"admin\"\r\n          icon={ICON.SAVE}\r\n          onClick={() => guardarDatos()}\r\n        />\r\n      </Stack>\r\n    </Controls.Modal>\r\n  )\r\n}"],"names":["dataInitialFilter","NIVEL_ESTUDIO","ESTADO","paginate","rowsPerPage","page","count","estadoList","label","value","NivelEstudioDetail","useForm","dataForm","handleDataFormChange","resetData","useState","isDataToEdit","setIsDataToEdit","open","setOpen","pagination","setPagination","nivelEstudio","setNivelEstudio","setLoader","useLoaderContext","navigate","useNavigate","getNivelEstudio","SaveRequestData","path","pathServer","body","fnRequest","SERVICES_POST","success","resp","data","error","err","MessageUtil","message","statusText","type","seg","useEffect","direction","spacing","variant","component","title","onClick","container","item","xs","name","onChange","list","resetForm","filterForm","fnPagination","length","map","el","index","icon","ICON","pathFront","colSpan","sx","textAlign","ModalNivelEstudioSave","saveNivelEstudio","dataSave","validate","fieldValues","temp","errors","setErrors","Object","values","every","x","useFormValidation","setData","handleInputFormChange","closeModal","minWidth","fullWidth","maxWidth","justifyContent"],"sourceRoot":""}