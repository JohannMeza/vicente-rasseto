{"version":3,"file":"static/js/219.1ca00fbe.chunk.js","mappings":"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","sources":["modules/administrador/grados/detail/GradosDetail.js"],"sourcesContent":["import {\r\n  Box,\r\n  Grid,\r\n  Stack,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableRow,\r\n} from \"@mui/material\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport ButtonsSearchComponent from \"../../../../components/utilComponents/ButtonsSearchComponent\";\r\nimport { pathServer } from \"../../../../config/router/path\";\r\nimport Controls from \"../../../../framework/components/Controls\";\r\nimport { ICON } from \"../../../../framework/components/icons/Icon\";\r\nimport { SaveRequestData } from \"../../../../helpers/helpRequestBackend\";\r\nimport { useForm } from \"../../../../hooks/useForm\";\r\nimport { useFormValidation } from \"../../../../hooks/useFormValidation\";\r\nimport useLoaderContext from \"../../../../hooks/useLoaderContext\";\r\nimport { SERVICES_POST } from \"../../../../services/services.axios\";\r\nimport { MessageUtil } from \"../../../../util/MessageUtil\";\r\n\r\nconst dataInitialFilter = {\r\n  GRADOS: \"\",\r\n  ESTADO: true,\r\n};\r\n\r\nconst paginate = {\r\n  rowsPerPage: 10,\r\n  page: 0,\r\n  count: 0,\r\n};\r\n\r\nconst estadoList = [\r\n  { label: \"Activo\", value: true },\r\n  { label: \"Inactivo\", value: false }\r\n]\r\n\r\nexport default function GradosDetail() {\r\n  const [dataForm, handleDataFormChange, resetData] = useForm(dataInitialFilter);\r\n  const [pagination, setPagination] = useState(paginate);\r\n  const [grados, setGrados] = useState([]);\r\n  const setLoader = useLoaderContext();\r\n  const [open, setOpen] = useState(false)\r\n  const [isDataToEdit, setIsDataToEdit] = useState(null)\r\n\r\n  const getGrados = (rowsPerPage = 10, page = 1) => {\r\n    setLoader(true);\r\n    SaveRequestData({\r\n      path: pathServer.ADMINISTRACION.GRADOS.INDEX,\r\n      body: dataForm,\r\n      fnRequest: SERVICES_POST,\r\n      pagination: true,\r\n      rowsPerPage,\r\n      page,\r\n      success: (resp) => {\r\n        setLoader(false);\r\n        console.log(resp);\r\n        let { rowsPerPage, count, page } = resp;\r\n        --page;\r\n        setGrados(resp.data);\r\n        setPagination({ rowsPerPage, count, page });\r\n      },\r\n      error: (err) => {\r\n        setLoader(false);\r\n        MessageUtil({ message: err.statusText, type: \"error\", seg: 10 });\r\n      },\r\n    });\r\n  };\r\n\r\n  const saveGrado = () => {\r\n    \r\n  }\r\n\r\n  useEffect(() => {\r\n    getGrados();\r\n  }, []);\r\n\r\n  return (\r\n    <Box>\r\n      <Stack direction=\"row\" spacing={3}>\r\n        <Controls.Title variant=\"h1\" component=\"h1\" title=\"Grados\" />\r\n\r\n        <Controls.ButtonComponent\r\n          variant=\"primary-small\"\r\n          type=\"admin\"\r\n          title=\"Nuevo Grado\"\r\n          onClick={() => setOpen(true)}\r\n        />\r\n      </Stack>\r\n      <br />\r\n      <Box>\r\n        <Controls.TextComponent variant=\"h3\" component=\"div\">\r\n          Filtros de BÃºsqueda\r\n        </Controls.TextComponent>\r\n        <br />\r\n        <Grid container spacing={2}>\r\n          <Grid item xs={3}>\r\n            <Controls.InputComponent label=\"Grados\" />\r\n          </Grid>\r\n          <Grid item xs={3}>\r\n            <Controls.InputComponent label=\"Estado\" />\r\n          </Grid>\r\n        </Grid>\r\n        <br />\r\n        <ButtonsSearchComponent resetForm={resetData} filterForm={getGrados} />\r\n      </Box>\r\n      <br />\r\n      <Controls.TableComponents>\r\n        <Table>\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell>Grado</TableCell>\r\n              <TableCell>Nivel Estudio</TableCell>\r\n              <TableCell>Opciones</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {grados?.length > 0 ? (\r\n              grados.map((el, index) => {\r\n                <TableRow key={index}>\r\n                  <TableCell>{el.DESCRIPCION}</TableCell>\r\n                  <TableCell>{el.NIVEL_ESTUDIO}</TableCell>\r\n                  <TableCell>\r\n                   <Stack direction=\"row\" spacing={1}>\r\n                      <Controls.ButtonIconComponent\r\n                        title=\"Ver\"\r\n                        icon={ICON.EDIT}\r\n                      />\r\n                      <Controls.ButtonIconComponent\r\n                        title=\"Ver\"\r\n                        icon={ICON.DELETE}\r\n                      />\r\n                    </Stack>\r\n                  </TableCell>\r\n                </TableRow>  \r\n              })\r\n            ) : (\r\n              <TableRow>\r\n                <TableCell colSpan={3} sx={{ textAlign: \"center\" }}>Sin Filas</TableCell>\r\n              </TableRow>\r\n            )}\r\n          </TableBody>\r\n        </Table>\r\n      </Controls.TableComponents>\r\n\r\n      <ModalGrados \r\n        open={open}\r\n        setOpen={setOpen}\r\n        saveGrado={saveGrado}\r\n        isDataToEdit={isDataToEdit}\r\n        setIsDataToEdit={setIsDataToEdit}\r\n      />\r\n    </Box>\r\n  );\r\n}\r\n\r\nconst ModalGrados = ({ open, setOpen, saveGrado, isDataToEdit, setIsDataToEdit }) => {\r\n  const validate = (fieldValues = data) =>  {\r\n    let temp = {...errors};\r\n    \r\n    if (\"NIVEL_ESTUDIO\" in fieldValues) {\r\n      temp.NIVEL_ESTUDIO = !fieldValues.NIVEL_ESTUDIO ? \"El campo Nivel de Estudio es requerido\" : \"\";\r\n    } \r\n\r\n    if (\"ESTADO\" in fieldValues) {\r\n      temp.ESTADO = typeof fieldValues.ESTADO !== \"boolean\" ? \"El campo Estado es requerido\" : \"\";\r\n    } \r\n    \r\n    setErrors({...temp});\r\n    if (fieldValues === data) {\r\n      return Object.values(temp).every((x) => x === '');\r\n    }\r\n  }\r\n\r\n  const {data, setData, errors, setErrors, handleInputFormChange, resetForm} = useFormValidation(dataInitialFilter, true, validate);\r\n  const closeModal = () => {\r\n    resetForm()\r\n    setOpen(false)\r\n    setIsDataToEdit(null)\r\n  }\r\n\r\n  const guardarDatos = () => {\r\n    if (validate()) {\r\n      saveGrado(data)\r\n      setIsDataToEdit(null)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (isDataToEdit) {\r\n      setData(isDataToEdit)\r\n    }\r\n  }, [isDataToEdit, setData])\r\n\r\n  return (\r\n    <Controls.Modal\r\n    open={open}\r\n    setOpen={closeModal}\r\n    minWidth={600}\r\n    fullWidth={true}\r\n    maxWidth=\"sm\"\r\n    title=\"Nuevo Grado\"\r\n    >\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={12}>\r\n          <Controls.InputComponent\r\n            label=\"Grado\"\r\n            name=\"NIVEL_ESTUDIO\"\r\n            onChange={handleInputFormChange}\r\n            error={errors.NIVEL_ESTUDIO}\r\n            value={data.NIVEL_ESTUDIO}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <Controls.SelectComponent\r\n            label=\"Estado\"\r\n            list={estadoList}\r\n            name=\"ESTADO\"\r\n            onChange={handleInputFormChange}\r\n            error={errors.ESTADO}\r\n            value={data.ESTADO}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n      <br />\r\n      <Stack direction=\"row\" spacing={3} justifyContent=\"center\">\r\n        <Controls.ButtonComponent\r\n          title=\"VOLVER\"\r\n          variant=\"secondary-normal\"\r\n          type=\"admin\"\r\n          icon={ICON.BACK}\r\n          onClick={closeModal}\r\n        />\r\n        <Controls.ButtonComponent\r\n          title=\"Guardar\"\r\n          variant=\"primary-normal\"\r\n          type=\"admin\"\r\n          icon={ICON.SAVE}\r\n          onClick={() => guardarDatos()}\r\n        />\r\n      </Stack>\r\n    </Controls.Modal>\r\n  )\r\n}"],"names":["dataInitialFilter","GRADOS","ESTADO","paginate","rowsPerPage","page","count","estadoList","label","value","GradosDetail","useForm","dataForm","resetData","useState","setPagination","grados","setGrados","setLoader","useLoaderContext","open","setOpen","isDataToEdit","setIsDataToEdit","getGrados","SaveRequestData","path","pathServer","body","fnRequest","SERVICES_POST","pagination","success","resp","console","log","data","error","err","MessageUtil","message","statusText","type","seg","useEffect","direction","spacing","variant","component","title","onClick","container","item","xs","resetForm","filterForm","length","map","el","index","DESCRIPCION","NIVEL_ESTUDIO","ICON","colSpan","sx","textAlign","ModalGrados","saveGrado","validate","fieldValues","temp","errors","setErrors","Object","values","every","x","useFormValidation","setData","handleInputFormChange","closeModal","minWidth","fullWidth","maxWidth","name","onChange","list","justifyContent","icon"],"sourceRoot":""}