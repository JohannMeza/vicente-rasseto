{"version":3,"file":"static/js/318.40ef34f9.chunk.js","mappings":"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","sources":["modules/administrador/paginas/detail/PaginasDetail.js"],"sourcesContent":["// import React, { useEffect } from \"react\";\r\n// import Controls from \"../../../../framework/components/Controls\";\r\n// import { Stack, Grid } from \"@mui/material\";\r\n// import { ICON } from \"../../../../framework/components/icons/Icon\";\r\n// import { useFormValidation } from \"../../../../hooks/useFormValidation\";\r\n\r\n// export default function PaginasDetailModalPage({\r\n//   open,\r\n//   setOpen,\r\n//   listSubPaginas,\r\n//   setListSubPaginas,\r\n//   dataSubmenu,\r\n//   setDataSubmenu,\r\n//   id\r\n// }) {\r\n//   const dataInitial = {\r\n//     ID_MENU: id,\r\n//     PATH: \"\",\r\n//     NOMBRE_SUBMENU: \"\",\r\n//     NOMBRE_ICON: \"\",\r\n//     _id: \"\"\r\n//   };\r\n\r\n//   const validate = (fieldValues = data) => {\r\n//     let temp = { ...errors };\r\n//     if (\"PATH\" in fieldValues) {\r\n//       temp.PATH =\r\n//         fieldValues.PATH === \"\"\r\n//           ? \"El campo Ruta de la Página es requerido\"\r\n//           : \"\";\r\n//     }\r\n//     if (\"NOMBRE_SUBMENU\" in fieldValues) {\r\n//       temp.NOMBRE_SUBMENU =\r\n//         fieldValues.NOMBRE_SUBMENU === \"\"\r\n//           ? \"El campo Nombre de la Sub Página es requerido\"\r\n//           : \"\";\r\n//     }\r\n//     if (\"NOMBRE_ICON\" in fieldValues) {\r\n//       temp.NOMBRE_ICON =\r\n//         fieldValues.NOMBRE_ICON === \"\"\r\n//           ? \"El campo Nombre del Icono es requerido\"\r\n//           : \"\";\r\n//     }\r\n//     setErrors({ ...temp });\r\n//     if (fieldValues === data) {\r\n//       return Object.values(temp).every((x) => x === \"\");\r\n//     }\r\n//   };\r\n\r\n//   const { data, setData, errors, setErrors, handleInputFormChange, resetForm } =\r\n//     useFormValidation(dataInitial, validate);\r\n\r\n//   const addSubpagina = () => {\r\n//     if (validate()) {\r\n//       if (data._id || data.id) {\r\n//         let arrSubPagina = []\r\n//         if (data._id) {\r\n//           arrSubPagina = listSubPaginas.map(el => el._id === data._id ? data : el)\r\n//         }\r\n\r\n//         if (data.id) {\r\n//           arrSubPagina = listSubPaginas.map(el => el.id === data.id ? data : el)\r\n//         }\r\n//         setListSubPaginas(arrSubPagina)\r\n//       } else {\r\n//         setListSubPaginas([...listSubPaginas, {...data, id: Date.now().toString()}]);\r\n//       }\r\n\r\n//       setOpen(false);\r\n//       resetForm();\r\n//       setTimeout(() => {\r\n//         setDataSubmenu(null);\r\n//       }, 500)\r\n//     }\r\n//   };\r\n\r\n//   const closeModal = () => {\r\n//     setOpen(false);\r\n//     resetForm()\r\n//     setTimeout(() => {\r\n//       setDataSubmenu(null);\r\n//     }, 500)\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     if (dataSubmenu) setData(dataSubmenu)\r\n//   }, [dataSubmenu, setData]);\r\n\r\n//   return (\r\n//     <Controls.Modal\r\n//       open={open}\r\n//       setOpen={closeModal}\r\n//       minWidth={600}\r\n//       fullWidth={true}\r\n//       maxWidth=\"sm\"\r\n//       title={dataSubmenu ? \"Editar Sub Página\" : \"Nueva Sub Página\"}\r\n//     >\r\n//       <Grid container spacing={3}>\r\n//         <Grid item xs={12}>\r\n//           <Controls.InputComponent\r\n//             label=\"Nombre de la Sub Página\"\r\n//             name=\"NOMBRE_SUBMENU\"\r\n//             value={data.NOMBRE_SUBMENU}\r\n//             error={errors.NOMBRE_SUBMENU}\r\n//             onChange={handleInputFormChange}\r\n//           />\r\n//         </Grid>\r\n//         <Grid item xs={12}>\r\n//           <Controls.InputComponent\r\n//             label=\"Ruta de la Página\"\r\n//             name=\"PATH\"\r\n//             value={data.PATH}\r\n//             error={errors.PATH}\r\n//             onChange={handleInputFormChange}\r\n//           />\r\n//         </Grid>\r\n//         <Grid item xs={12}>\r\n//           <Controls.InputComponent\r\n//             label=\"Nombre del Icono\"\r\n//             name=\"NOMBRE_ICON\"\r\n//             value={data.NOMBRE_ICON}\r\n//             error={errors.NOMBRE_ICON}\r\n//             onChange={handleInputFormChange}\r\n//           />\r\n//         </Grid>\r\n//       </Grid>\r\n//       <br />\r\n//       <Stack direction=\"row\" spacing={3} justifyContent=\"center\">\r\n//         <Controls.ButtonComponent\r\n//           title=\"VOLVER\"\r\n//           variant=\"secondary-normal\"\r\n//           type=\"admin\"\r\n//           icon={ICON.BACK}\r\n//           onClick={closeModal}\r\n//         />\r\n//         <Controls.ButtonComponent\r\n//           title={dataSubmenu ? \"Editar\" : \"Guardar\"}\r\n//           variant=\"primary-normal\"\r\n//           type=\"admin\"\r\n//           icon={ICON.SAVE}\r\n//           onClick={addSubpagina}\r\n//         />\r\n//       </Stack>\r\n//     </Controls.Modal>\r\n//   );\r\n// }\r\n\r\nimport { Box, Grid, Stack, Table, TableBody, TableCell, TableHead, TableRow } from \"@mui/material\";\r\nimport React, { useCallback, useEffect, useState } from \"react\";\r\nimport ButtonsSearchComponent from \"../../../../components/utilComponents/ButtonsSearchComponent\";\r\nimport { CONFIG_DELETE, CONFIG_INDEX, CONFIG_NEW, pathServer } from \"../../../../config/router/path\";\r\nimport Controls from \"../../../../framework/components/Controls\";\r\nimport { ICON } from \"../../../../framework/components/icons/Icon\";\r\nimport { SaveRequestData } from \"../../../../helpers/helpRequestBackend\";\r\nimport { useForm } from \"../../../../hooks/useForm\";\r\nimport { useFormValidation } from \"../../../../hooks/useFormValidation\";\r\nimport useLoaderContext from \"../../../../hooks/useLoaderContext\";\r\nimport { listMenu, deleteMenu, saveMenu } from \"../../../../services/configuracion_menu.axios\";\r\nimport { SERVICES_POST } from \"../../../../services/services.axios\";\r\nimport { AlertUtilDelete, AlertUtilRelease } from \"../../../../util/AlertUtil\";\r\nimport { MessageUtil } from \"../../../../util/MessageUtil\";\r\n\r\nconst paginate = {\r\n  rowsPerPage: 10,\r\n  page: 0,\r\n  count: 0\r\n}\r\n\r\nconst dataInitialPaginas = {\r\n  NOMBRE_MENU: null,\r\n  NOMBRE_ICON: null,\r\n  PATH: null,\r\n  ESTADO: true\r\n};\r\n\r\nconst dataInitialFilter = {\r\n  NOMBRE_MENU: null,\r\n  PATH: null,\r\n  ESTADO: true\r\n}\r\n\r\nconst listEstado = [\r\n  { label: 'Activo', value: true },\r\n  { label: 'Inactivo', value: false },\r\n]\r\n\r\nexport default function PaginasDetail() {\r\n  const [paginas, setPaginas] = useState([]);\r\n  const [openModal, setOpenModal] = useState(false)\r\n  const {data, setData, errors, handleInputFormChange, resetForm} = useFormValidation(dataInitialPaginas, true)\r\n  const [dataForm, handleDataFormChange, resetData] = useForm(dataInitialFilter)\r\n  const [pagination, setPagination] = useState(paginate)\r\n  const setLoader = useLoaderContext()\r\n\r\n  const getPaginas = (rowsPerPage = 10, page = 1) => {\r\n    setLoader(true)\r\n    SaveRequestData({\r\n      path: CONFIG_INDEX,\r\n      body: dataForm,\r\n      fnRequest: listMenu,\r\n      pagination: true,\r\n      rowsPerPage,\r\n      page,\r\n      success: (resp) => {\r\n        setLoader(false)\r\n        let {rowsPerPage, count, page} = resp;\r\n        --page \r\n        setPaginas(resp.data);\r\n        setPagination({rowsPerPage, count, page})\r\n      },\r\n      error: (err) => {\r\n        setLoader(false)\r\n        MessageUtil({ message: err.statusText, type: \"error\", seg: 10 });\r\n      },\r\n    });\r\n  };\r\n\r\n  const agregarPagina = () => {\r\n    console.log(errors)\r\n    setLoader(true);\r\n    if (data._id) {\r\n      SaveRequestData({ // editar\r\n        path: pathServer.CONFIGURACION.MENU.NEW,\r\n        body: {...data},\r\n        fnRequest: SERVICES_POST,\r\n        success: (resp) => {\r\n          getPaginas()\r\n          MessageUtil({ message: resp.statusText, type: \"success\", seg: 10 });\r\n          setOpenModal(false)\r\n          setLoader(false)\r\n        },\r\n        error: (err) => {\r\n          setLoader(false)\r\n          MessageUtil({ message: err.statusText, type: \"error\", seg: 10 });\r\n        }\r\n      })\r\n    } else {\r\n      SaveRequestData({ // save\r\n        path: pathServer.CONFIGURACION.MENU.NEW,\r\n        body: {...data},\r\n        fnRequest: SERVICES_POST,\r\n        success: (resp) => {\r\n          getPaginas()\r\n          MessageUtil({ message: resp.statusText, type: \"success\", seg: 10 });\r\n          setOpenModal(false)\r\n          setLoader(false)\r\n        },\r\n        error: (err) => {\r\n          setLoader(false)\r\n          MessageUtil({ message: err.statusText, type: \"error\", seg: 10 });\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  const deletePagina = (id) => {\r\n    const config = {\r\n      title: '¿Estás seguro?',\r\n      text: \"Al eliminar la página, no habrá vuelta atrás!\",\r\n      icon: 'warning',\r\n    }\r\n    \r\n    const fnRequestPage = () => {\r\n      SaveRequestData({\r\n        path: `${CONFIG_DELETE}/${id}`,\r\n        body: {},\r\n        fnRequest: deleteMenu,\r\n        success: (resp) => {\r\n          AlertUtilRelease({\r\n            title: '¡Eliminado!',\r\n            text: resp.statusText,\r\n            icon: 'success',\r\n          })\r\n\r\n          getPaginas();\r\n        },\r\n        error: (err) => {\r\n          MessageUtil({ message: err.statusText, type: \"error\", seg: 10 });\r\n        },\r\n      })\r\n    }\r\n    \r\n    AlertUtilDelete(fnRequestPage, { config })\r\n  };\r\n\r\n  const editarPagina = (el) => {\r\n    setOpenModal(true)\r\n    setData(el)\r\n  }\r\n\r\n  useEffect(() => {\r\n    getPaginas()\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [])\r\n\r\n  return (\r\n    <>\r\n      <Box>\r\n        <Stack direction=\"row\" spacing={3}>\r\n          <Controls.Title variant=\"h1\" component=\"h1\" title=\"Páginas\" />\r\n\r\n          <Controls.ButtonComponent\r\n            variant=\"primary-small\"\r\n            type=\"admin\"\r\n            title=\"Nueva Página\"\r\n            onClick={() => setOpenModal(true)}\r\n          />\r\n        </Stack>\r\n        \r\n        <br />\r\n        \r\n        <Box>\r\n          <Controls.TextComponent variant=\"h3\" component=\"div\">Filtros de Búsqueda</Controls.TextComponent>\r\n          <br />\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={3}>\r\n              <Controls.InputComponent label=\"Nombre de la Página\" name=\"NOMBRE_MENU\" onChange={handleDataFormChange} value={dataForm.NOMBRE_MENU} />\r\n            </Grid>\r\n            <Grid item xs={3}>\r\n              <Controls.InputComponent label=\"Ruta\" name=\"PATH\" onChange={handleDataFormChange} value={dataForm.PATH} />\r\n            </Grid>\r\n            <Grid item xs={3}>\r\n              <Controls.SelectComponent label=\"Estado\" list={listEstado} name=\"ESTADO\" onChange={handleDataFormChange} value={dataForm.ESTADO} />\r\n            </Grid>\r\n          </Grid>\r\n          <br />\r\n          <ButtonsSearchComponent\r\n            resetForm={resetData}\r\n            filterForm={getPaginas}\r\n          />\r\n        </Box>\r\n\r\n        <br />\r\n\r\n        <Controls.TableComponents\r\n          pagination={pagination}\r\n          setPagination={setPagination}\r\n          fnPagination={getPaginas}\r\n        >\r\n          <Table stickyHeader aria-label=\"sticky table\">\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell>Nombre</TableCell>\r\n                <TableCell>Ruta</TableCell>\r\n                <TableCell>Icon</TableCell>\r\n                <TableCell>Operación</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n\r\n            <TableBody>\r\n              {paginas.length > 0 ? (\r\n                paginas.map((el, index) => (\r\n                  <TableRow hover role=\"checkbox\" tabIndex={-1} key={index}>\r\n                    <TableCell>{el.NOMBRE_MENU}</TableCell>\r\n                    <TableCell>{el.PATH}</TableCell>\r\n                    <TableCell>{el.NOMBRE_ICON}</TableCell>\r\n                    <TableCell>\r\n                      <Stack direction=\"row\" spacing={1}>\r\n                        <Controls.ButtonIconComponent\r\n                          title=\"Editar\"\r\n                          icon={ICON.EDIT}\r\n                          onClick={() => editarPagina(el)}\r\n                        />\r\n\r\n                        <Controls.ButtonIconComponent\r\n                          title=\"Eliminar\"\r\n                          icon={ICON.DELETE}\r\n                          onClick={() => deletePagina(el._id)}\r\n                        />\r\n                      </Stack>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))\r\n              ) : (\r\n                <TableRow hover role=\"checkbox\" tabIndex={-1}>\r\n                  <TableCell colSpan={4} align=\"center\">\r\n                    Todavía no se insertó ningun registro\r\n                  </TableCell>\r\n                </TableRow>\r\n              )}\r\n            </TableBody>\r\n          </Table>\r\n        </Controls.TableComponents>\r\n      </Box>\r\n\r\n      <Controls.Modal\r\n        open={openModal}\r\n        setOpen={setOpenModal}\r\n        title={data._id ? \"Editar Página\" : \"Agregar Nueva Página\"}\r\n        fullWidth={true}\r\n        resetForm={resetForm}\r\n        maxWidth=\"sm\"\r\n      >\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={12}>\r\n            <Controls.InputComponent\r\n              label=\"Nombre de la página\"\r\n              name=\"NOMBRE_MENU\"\r\n              value={data.NOMBRE_MENU}\r\n              onChange={handleInputFormChange}\r\n              error={errors.NOMBRE_MENU}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <Controls.InputComponent\r\n              label=\"Nombre del icono\"\r\n              name=\"NOMBRE_ICON\"\r\n              value={data.NOMBRE_ICON}\r\n              onChange={handleInputFormChange}\r\n              error={errors.NOMBRE_ICON}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <Controls.InputComponent\r\n              label=\"Ruta Base\"\r\n              name=\"PATH\"\r\n              value={data.PATH}\r\n              onChange={handleInputFormChange}\r\n              error={errors.PATH}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <Controls.SelectComponent\r\n              label=\"Estado\"\r\n              name=\"ESTADO\"\r\n              value={data.ESTADO}\r\n              list={listEstado}\r\n              onChange={handleInputFormChange}\r\n              error={errors.ESTADO}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <Stack direction=\"row\" spacing={3} justifyContent=\"center\">\r\n              <Controls.ButtonComponent\r\n                title=\"VOLVER\"\r\n                variant=\"secondary-normal\"\r\n                type=\"admin\"\r\n                icon={ICON.BACK}\r\n                onClick={() => setOpenModal(false)}\r\n              />\r\n\r\n              <Controls.ButtonComponent\r\n                title={data._id ? \"Editar\" : \"Guardar\"}\r\n                variant=\"primary-normal\"\r\n                type=\"admin\"\r\n                icon={ICON.SAVE}\r\n                onClick={() => agregarPagina()}\r\n              />\r\n            </Stack>\r\n          </Grid>\r\n        </Grid>\r\n      </Controls.Modal>\r\n    </>\r\n  );\r\n}\r\n"],"names":["paginate","rowsPerPage","page","count","dataInitialPaginas","NOMBRE_MENU","NOMBRE_ICON","PATH","ESTADO","dataInitialFilter","listEstado","label","value","PaginasDetail","useState","paginas","setPaginas","openModal","setOpenModal","useFormValidation","data","setData","errors","handleInputFormChange","resetForm","useForm","dataForm","handleDataFormChange","resetData","pagination","setPagination","setLoader","useLoaderContext","getPaginas","SaveRequestData","path","CONFIG_INDEX","body","fnRequest","listMenu","success","resp","error","err","MessageUtil","message","statusText","type","seg","useEffect","direction","spacing","variant","component","title","onClick","container","item","xs","name","onChange","list","filterForm","fnPagination","stickyHeader","length","map","el","index","hover","role","tabIndex","icon","ICON","editarPagina","id","_id","AlertUtilDelete","CONFIG_DELETE","deleteMenu","AlertUtilRelease","text","config","colSpan","align","open","setOpen","fullWidth","maxWidth","justifyContent","console","log","pathServer","SERVICES_POST"],"sourceRoot":""}