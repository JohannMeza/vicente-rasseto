{"version":3,"file":"static/js/502.2b8455b6.chunk.js","mappings":"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","sources":["modules/administrador/perfiles/admin/PerfilesAdminPage.js"],"sourcesContent":["import { Box, Grid, Stack, Table, TableBody, TableCell, TableHead, TableRow } from '@mui/material';\r\nimport React, { useEffect, useState } from 'react';\r\nimport Controls from '../../../../framework/components/Controls';\r\nimport { ICON } from '../../../../framework/components/icons/Icon';\r\nimport { SaveRequestData } from '../../../../helpers/helpRequestBackend';\r\nimport { useFormValidation } from '../../../../hooks/useFormValidation';\r\nimport { pathServer } from '../../../../config/router/path';\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { useForm } from '../../../../hooks/useForm';\r\nimport ButtonsSearchComponent from '../../../../components/utilComponents/ButtonsSearchComponent';\r\nimport { SERVICES_POST } from '../../../../services/services.axios';\r\nimport { MessageUtil } from '../../../../util/MessageUtil';\r\nimport useLoaderContext from '../../../../hooks/useLoaderContext';\r\nimport ValidateData from '../../../../hooks/useValidateData';\r\nimport { pathFront } from '../../../../config/router/pathFront';\r\n\r\nconst paginate = {\r\n  rowsPerPage: 10,\r\n  page: 0,\r\n  count: 0\r\n}\r\n\r\nconst dataInitial = {\r\n  NOMBRE_PERFIL: \"\",\r\n  IS_MANAGEABLE: true,\r\n  ESTADO: true\r\n}\r\n\r\nconst dataFormInitial = {\r\n  NOMBRE_PERFIL: null,\r\n  ESTADO: true\r\n}\r\n\r\nconst estadoList = [\r\n  { label: \"Activo\", value: true },\r\n  { label: \"Inactivo\", value: false }\r\n]\r\n\r\nexport default function PerfilesAdminPage () {\r\n  const validate = (fieldValues = data) =>  {\r\n    let temp = {...errors};\r\n    \r\n    if (\"NOMBRE_PERFIL\" in fieldValues) {\r\n      temp.NOMBRE_PERFIL = !fieldValues.NOMBRE_PERFIL ? \"El campo Nombre de Perfil es requerido\" : \"\";\r\n    } \r\n    \r\n    setErrors({...temp});\r\n    console.log(temp, Object.values(temp).every((x) => x === ''))\r\n    if (fieldValues === data) {\r\n      return Object.values(temp).every((x) => x === '');\r\n    }\r\n  }\r\n\r\n  const setLoader = useLoaderContext();\r\n  const [perfiles, setPerfiles] = useState([]);\r\n  const [pagination, setPagination] = useState(paginate);  \r\n  const [open, setOpen] = useState(false);\r\n  const {data, setData, errors, setErrors, handleInputFormChange, resetForm} = useFormValidation(dataInitial, true)\r\n  const [dataForm, handleInputChange, resetData] = useForm(dataFormInitial);\r\n  const navigate = useNavigate();\r\n\r\n  const getPerfiles = (rowsPerPage = 10, page = 1) => {\r\n    setLoader(true)\r\n    SaveRequestData({\r\n      path: pathServer.SEGURIDAD.PERFILES.INDEX,\r\n      body: dataForm,\r\n      fnRequest: SERVICES_POST,\r\n      pagination: true,\r\n      rowsPerPage,\r\n      page,\r\n      success: (resp) => {\r\n        let { rowsPerPage, count, page } = resp;\r\n        --page;\r\n        setPagination({ rowsPerPage, count, page });\r\n        setPerfiles(resp.data)\r\n        setLoader(false)\r\n      },\r\n      error: (err) => {\r\n        setLoader(false)\r\n        MessageUtil({ message: err.statusText, type: \"error\", seg: 10 })\r\n      }\r\n    })\r\n  }\r\n\r\n  const savePerfil = () => {\r\n    if (validate()) {\r\n      setLoader(true)\r\n      SaveRequestData({\r\n        path: pathServer.SEGURIDAD.PERFILES.NEW,\r\n        body: data,\r\n        fnRequest: SERVICES_POST,\r\n        success: (resp) => {\r\n          getPerfiles()\r\n          setOpen(false)\r\n          resetForm()\r\n          setLoader(false)\r\n          MessageUtil({ message: resp.statusText, type: \"success\", seg: 10 })\r\n        },\r\n        error: (err) => {\r\n          resetForm()\r\n          setOpen(false)\r\n          setLoader(false)\r\n          MessageUtil({ message: err.statusText, type: \"error\", seg: 10 })\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  const closeModal = () => {\r\n    setOpen(false)\r\n    resetData()\r\n  }\r\n\r\n  const updatePerfil = (el) => {\r\n    setOpen(true)\r\n    setData(el)\r\n  }\r\n\r\n  useEffect(() => {\r\n    getPerfiles()\r\n  }, [])\r\n\r\n  return(\r\n    <Box>\r\n      <Stack direction=\"row\" spacing={3}>\r\n        <Controls.Title variant=\"h1\" component=\"h1\" title=\"Perfiles\" />\r\n\r\n        <Controls.ButtonComponent\r\n          variant=\"primary-small\"\r\n          type=\"admin\"\r\n          title=\"Nuevo Perfil\"\r\n          onClick={() => setOpen(true)}\r\n        />\r\n      </Stack>\r\n\r\n      <br />\r\n      \r\n      <Box>\r\n        <Controls.TextComponent variant=\"h3\" component=\"div\">Filtros de Búsqueda</Controls.TextComponent>\r\n        <br />\r\n        <Grid container spacing={2}>\r\n          <Grid item xs={3}>\r\n            <Controls.InputComponent label=\"Nombre\" name=\"NOMBRE_PERFIL\" value={dataForm.NOMBRE_PERFIL} onChange={handleInputChange} />\r\n          </Grid>\r\n          <Grid item xs={3}>\r\n            <Controls.SelectComponent label=\"Estado\" name=\"ESTADO\" list={estadoList} value={dataForm.ESTADO} onChange={handleInputChange} />\r\n          </Grid>\r\n        </Grid>\r\n        <br />\r\n        <ButtonsSearchComponent\r\n          resetForm={() => resetData()}\r\n          filterForm={() => getPerfiles()}\r\n        />\r\n      </Box>\r\n\r\n      <br />\r\n\r\n      <Controls.TableComponents \r\n        pagination={pagination} \r\n        setPagination={setPagination} \r\n        fnPagination={getPerfiles}\r\n      >\r\n        <Table stickyHeader aria-label=\"sticky table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell>Nombre</TableCell>\r\n              <TableCell>Administrable</TableCell>\r\n              <TableCell>Operación</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n\r\n          <TableBody>\r\n            {perfiles.length > 0 ? (\r\n              perfiles.map((el, index) => (\r\n                <TableRow hover role=\"checkbox\" tabIndex={-1} key={index}>\r\n                  <TableCell>{el.NOMBRE_PERFIL}</TableCell>\r\n                  <TableCell>{el.IS_MANAGEABLE ? \"Administrable\" : \"No Administrable\"}</TableCell>\r\n                  <TableCell>\r\n                    <Stack direction=\"row\" spacing={1}>\r\n                      <Controls.ButtonIconComponent\r\n                        title=\"Editar\"\r\n                        icon={ICON.EDIT}\r\n                        onClick={() => updatePerfil(el)}\r\n                      />\r\n\r\n                      <Controls.ButtonIconComponent\r\n                        title=\"Eliminar\"\r\n                        icon={ICON.DELETE}\r\n                      />\r\n\r\n                      <Controls.ButtonComponent\r\n                        title={\"CONFIGURAR\"}\r\n                        variant=\"secondary-small\"\r\n                        type=\"admin\"\r\n                        onClick={() => navigate(pathFront.PERFILES_CONFIG + el._id)}\r\n                      />\r\n                    </Stack>\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))\r\n            ) : (\r\n              <TableRow hover role=\"checkbox\" tabIndex={-1}>\r\n                <TableCell colSpan={5} align=\"center\">\r\n                  Todavía no se insertó ningun registro\r\n                </TableCell>\r\n              </TableRow>\r\n            )}\r\n          </TableBody>\r\n        </Table>\r\n      </Controls.TableComponents>\r\n\r\n      <Controls.Modal\r\n        open={open}\r\n        setOpen={closeModal}\r\n        minWidth={600}\r\n        fullWidth={true}\r\n        maxWidth=\"sm\"\r\n        title=\"Nuevo Perfil\"\r\n      >\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={12}>\r\n            <Controls.InputComponent\r\n              label=\"Nombre de la Sub Página\"\r\n              name=\"NOMBRE_PERFIL\"\r\n              onChange={handleInputFormChange}\r\n              value={data.NOMBRE_PERFIL}\r\n              error={errors.NOMBRE_PERFIL}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <Controls.SelectComponent\r\n              label=\"Estado\"\r\n              list={estadoList}\r\n              name=\"ESTADO\"\r\n              value={data.ESTADO}\r\n              onChange={handleInputFormChange}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <Controls.SelectComponent\r\n              label=\"Administrable\"\r\n              list={estadoList}\r\n              name=\"IS_MANAGEABLE\"\r\n              value={data.IS_MANAGEABLE}\r\n              onChange={handleInputFormChange}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n        <br />\r\n        <Stack direction=\"row\" spacing={3} justifyContent=\"center\">\r\n          <Controls.ButtonComponent\r\n            title=\"VOLVER\"\r\n            variant=\"secondary-normal\"\r\n            type=\"admin\"\r\n            icon={ICON.BACK}\r\n            onClick={() => closeModal()}\r\n          />\r\n          <Controls.ButtonComponent\r\n            title=\"Guardar\"\r\n            variant=\"primary-normal\"\r\n            type=\"admin\"\r\n            icon={ICON.SAVE}\r\n            onClick={() => savePerfil()}\r\n          />\r\n        </Stack>\r\n      </Controls.Modal>\r\n    </Box>\r\n  )\r\n}"],"names":["paginate","rowsPerPage","page","count","dataInitial","NOMBRE_PERFIL","IS_MANAGEABLE","ESTADO","dataFormInitial","estadoList","label","value","PerfilesAdminPage","setLoader","useLoaderContext","useState","perfiles","setPerfiles","pagination","setPagination","open","setOpen","useFormValidation","data","setData","errors","setErrors","handleInputFormChange","resetForm","useForm","dataForm","handleInputChange","resetData","navigate","useNavigate","getPerfiles","SaveRequestData","path","pathServer","body","fnRequest","SERVICES_POST","success","resp","error","err","MessageUtil","message","statusText","type","seg","savePerfil","fieldValues","temp","console","log","Object","values","every","x","validate","closeModal","useEffect","direction","spacing","variant","component","title","onClick","container","item","xs","name","onChange","list","filterForm","fnPagination","stickyHeader","length","map","el","index","hover","role","tabIndex","icon","ICON","updatePerfil","pathFront","_id","colSpan","align","minWidth","fullWidth","maxWidth","justifyContent"],"sourceRoot":""}